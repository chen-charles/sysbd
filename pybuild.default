# predefined: envir, sysbd

import os
import configparser

DEBUG = envir.DEBUG
if DEBUG:
    RUN = print
else:
    RUN = sysbd.macro.launch

LINKER = "linker"
DEFAULT = "default"

config = configparser.ConfigParser(interpolation=None)
config.read(fpath + os.sep + "module.ini")

# compiling options
comp = set(config.sections())
comp.remove(DEFAULT)
if LINKER in comp: comp.remove(LINKER)


class module(sysbd.module.Module):
    all_target = dict()
    def make(self, link):
        print("Building for Module:", self.name)
        for i in comp:
            if "ext" not in i: self.all_target[i] = self.collect(i)
            else: self.all_target[i] = self.collect(config[i]["ext"])

        mkfh = set()
        mkfdat = set()

        for i in comp:
            compiler = sysbd.compiler.Compiler(config[i]["compiler"], config[i]["flags"])
            try:
                print("using",
                     (lambda compilerMacro, compilerFlagsMacro: eval(config[i]["format"]))("compilerMacro", "compilerFlagsMacro"),
                     "for compiler", compiler.cmd)
                compiler.mkcompstr = (lambda compilerMacro, compilerFlagsMacro: eval(config[i]["format"]))
            except:
                print("using default format for compiler", compiler.cmd)

            compilerMacro = "%s_COMPILER"%i
            compilerFlagsMacro =  "%s_FLAGS"%i
            mkfh.add(compiler.mkfstr(compilerMacro, compilerFlagsMacro))

            for j in self.all_target[i][1].keys():
                # j is fullname, self.all_target[i][1][j] is a str of files to be included
                mkfdat.add  \
                (
                    "%s.o: %s\n\t"%(j, self.all_target[i][1][j])
                #    + "$(%s) $(%s) $< -o $@\n"%(compilerMacro, compilerFlagsMacro)
                     + compiler.mkcompstr(compilerMacro, compilerFlagsMacro)
                )
                mkfdat.add  \
                (
                    "%s:;"%j
                )

        if LINKER in config.sections() and config[LINKER]["linker"].lower() != "null":
            linker = sysbd.compiler.Linker(config[LINKER]["linker"], config[LINKER]["flags"])
            mkfh.add(linker.mkfstr("LINKER", "LINKER_FLAGS"))
            in_module_targets, link_final = self.link(link)
            mkfdat.add \
            (
                "%s: %s\n\t" % (fpath+os.sep+config[DEFAULT]["target"], " ".join(in_module_targets))
                + "$(LINKER) $(LINKER_FLAGS) $@ %s\n"%(link_final)
            )

        mkfall = " ".join([" ".join(i) for i in [self.all_target[i][0] for i in self.all_target.keys()]]) \
            + " " + fpath+os.sep+config[DEFAULT]["target"]

        with open(fpath+os.sep+"Makefile", "w") as f:
            f.write \
            (
                "\n".join(mkfh)
                + "\nall: %s\n\n"%mkfall
                + "\n".join(mkfdat)
            )

        if int(RUN("make --file=%s"%(fpath+os.sep+"Makefile"))) == 2:
            raise Exception("Module: "+self.name+" failed to build. ")
        print("End Module:", self.name, end="\n\n")

    def link(self, link):   # link is a set()

        search = list()

        final = dict()

        indx = 0
        while True:
            if str(indx) in config[LINKER]:
                search.append(config[LINKER][str(indx)])
                final[indx] = ""
                indx += 1
            else:
                break

        in_module_targets = set()
        for i in self.all_target.keys():
            for j in self.all_target[i][0]:
                in_module_targets.add(j)
                if os.path.basename(j) in search:
                    loc = search.index(os.path.basename(j))
                    final[loc] = j
                    search[loc] = None
                else:
                    link.add(j)

        final[len(final)] = " ".join(link)

        search = list(filter(None.__ne__, search))
        if len(search) != 0: print("WARNING: unresolved linkage: %s"%" ".join(search))

        return in_module_targets, " ".join([final[i] for i in range(len(final))])

        # RUN("%s %s %s %s"%(config[LINKER]["linker"], config[LINKER]["flags"], config[DEFAULT]["target"], " ".join([final[i] for i in range(len(final))])))

    def collect(self, ext, parse_inc_sep=os.sep, parse_inc_stat="#include"):
        all_name = list()
        inc_data = dict()
        for name, fullname, root in sysbd.directory.dwalkext(self.path, ext):
            inc = ["%s "%fullname]
            all_name.append(fullname+".o")  #[:-1-len(ext)]
            for i in self.parse_include(root, name, os.sep): inc.append(i)
            inc_data[fullname] = (" ".join(inc))

        return all_name, inc_data

mod = module(config[DEFAULT]["name"], config[DEFAULT]["target"])
mod.dependencies = set(filter(None, [i.strip() for i in config[DEFAULT]["dependencies"].strip().strip(";").split(";")]))
mod.path = fpath

envir.MODULEMAP[mod.name] = mod

print("Module:", mod.name, end="\n\n")
